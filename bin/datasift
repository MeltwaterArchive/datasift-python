#!/usr/bin/env python
from __future__ import print_function

import sys, json, argparse, inspect

from requests.exceptions import HTTPError

from datasift.client import Client
from datasift.request import PartialRequest, DictResponse

def build_output_parameters_dict(params):
    output_params = filter(lambda x:x[0].startswith("output_params."), params)
    params = list(filter(lambda x:x not in output_params, params))
    output_params_dict = {}
    for key, value in output_params:
        output_params_dict[key.replace("output_params.", "")] = value
    params.append(["output_params", output_params_dict])
    return params

def main(argv):
    opts = parse_cli(argv)
    config = (opts.auth[0], opts.auth[1])
    if opts.url:
        if opts.url.startswith('http'):
            scheme, host = opts.url.split('://')
            PartialRequest.API_SCHEME = scheme
            PartialRequest.API_HOST = host
        else:
            PartialRequest.API_HOST = opts.url
    if opts.version:
        PartialRequest.API_VERSION=opts.version
    else:
        PartialRequest.API_VERSION="v1"
    config_kwargs = {}
    config_kwargs["ssl"] = not bool(opts.insecure)
    client = Client(*config, **config_kwargs)
    class_mapper = dict(
        core=client,
        push=client.push,
        preview=client.historics_preview,
        managed_sources=client.managed_sources,
        historics=client.historics,
        pylon=client.pylon,
        identity=client.account.identity,
        token=client.account.identity.token,
        limit=client.account.identity.limit)
    obj = class_mapper[opts.endpoint]
    try:
        target = getattr(obj, opts.command)
        spec = inspect.getargspec(target)

        if spec.defaults != None:
            optional_arguments = spec.args[-len(spec.defaults):]
        else:
            optional_arguments = []
        if opts.params == None:
            opts.params = []
        for i, optional in enumerate(optional_arguments):
            if optional not in map(lambda x:x[0], opts.params):
                value = spec.defaults[i]
                if value == None:
                    opts.params.append([optional, []])
                else:
                    opts.params.append([optional, value])
        if list(filter(lambda x:x[0].startswith("output_params."), opts.params)):
            opts.params = build_output_parameters_dict(opts.params)
        if opts.endpoint == "historics":
            opts.params = map(lambda x:[x[0] =="id" and "historics_id" or x[0], x[1]] ,opts.params)
        if opts.endpoint == "push":
            opts.params = map(lambda x:[x[0] =="id" and "subscription_id" or x[0], x[1]] ,opts.params)
        if opts.endpoint == "preview":
            opts.params = map(lambda x:[x[0] =="id" and "preview_id" or x[0], x[1]] ,opts.params)
            opts.params = map(lambda x:x[0] == "parameters" and [x[0], x[1].split(",")] or x ,opts.params)
            opts.params = map(lambda x:[x[0] =="hash" and "stream" or x[0], x[1]], opts.params)
        if opts.endpoint == "managed_sources":
            opts.params = map(lambda x:[x[0] =="id" and "source_id" or x[0], x[1]], opts.params)
        response = target(**dict(transform_params(opts.params)))
    except HTTPError as e:
        response = DictResponse(e.response)
    print(wrap_response(response))
    return 0


COMMANDS = {

    'core': [
        'compile',
        'validate',
        'usage',
        'balance',
        'dpu',
        'pull',
        ],

    'push': [
        'validate',
        'create',
        'update',
        'delete',
        'pause',
        'resume',
        'stop',
        'log',
        'get',
        ],

    'preview': [
        'create',
        'get',
        ],

    'managed_sources': [
        'create',
        'update',
        'delete',
        'start',
        'stop',
        'log',
        'get',
        ],

    'historics': [
        'prepare',
        'update',
        'delete',
        'start',
        'stop',
        'status',
        'get',
        ],

    'pylon': [
        'validate',
        'compile',
        'start',
        'stop',
        'analyze',
        'get',
        'tags'
        ],

    'identity': [
        'create',
        'update',
        'delete',
        'get',
        'list'
        ],

    'token': [
        'create',
        'update',
        'delete',
        'get',
        'list'
        ],

    'limit': [
        'create',
        'update',
        'delete',
        'get',
        'list'
        ],

    }


def wrap_response(response, **kwargs):
    """Wrap API response to an object suitable for testing."""
    data = dict(status=response.status_code,
                headers=response.headers,
                body=response.raw)
    return json.dumps(data, **kwargs)


def   transform_params(params):
    """Treat parameters as JSON or fall back to plain strings."""
    if params:
        for k, v in params:
            try:
                yield k, json.loads(v)
            except Exception:
                yield k, v



def parse_cli(argv):
    parser = argparse.ArgumentParser(prog=argv[0])
    add = parser.add_argument
    add('-a', '--auth',
        nargs=2,  required=True, metavar=('USER', 'APIKEY'),
        help='Datasift authentication credentials')
    add('-e', '--endpoint',
        choices=sorted(COMMANDS), default='core',
        help='Datasift endpoint [default %(default)r]')
    add('-c', '--command',
        required=True,
        help='Datasift command for specific endpoint')
    add('-p', '--param',
        nargs=2, action='append', dest='params', metavar=('KEY', 'VALUE'),
        help='Command specific parameter')
    add('-u', '--url',
        help='Override the URL for the Datasift API (for testing purposes)')
    add('--insecure',
        help='Disable SSL', action='store_true')
    add('-v', '--version',
        help="Pick API version to test against (default v1)")

    opts = parser.parse_args(argv[1:])

    if opts.command not in COMMANDS[opts.endpoint]:
        parser.error("argument -c/--command for endpoint %r: invalid choice: %r (choose from %s)" % (
            opts.endpoint, opts.command, ' '.join(repr(c) for c in COMMANDS[opts.endpoint])))

    return opts


if __name__ == '__main__':
    sys.exit(main(sys.argv))

